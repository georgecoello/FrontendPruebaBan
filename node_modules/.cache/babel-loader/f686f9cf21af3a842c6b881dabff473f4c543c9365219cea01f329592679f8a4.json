{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport NavBar from '../components/Nav.vue';\nimport FooterPage from '../components/Footer.vue';\nimport Modal from '../components/Modal.vue'; // Importar el modal\nimport axios from 'axios';\nexport default {\n  name: 'MantenimientosPage',\n  components: {\n    NavBar,\n    FooterPage,\n    Modal\n  },\n  data() {\n    return {\n      tabActual: 'canalesServicio',\n      // Pestaña activa\n      canalesServicio: [],\n      // Lista de canales de servicio\n      mostrarModal: false,\n      // Controla la visibilidad del modal\n      modalTitulo: '',\n      // Título del modal\n      modalCampos: [],\n      // Campos del formulario\n      modalFormulario: {},\n      // Datos del formulario\n      esEdicion: false // Indica si el modal está en modo edición\n    };\n  },\n  async created() {\n    await this.cargarDatos();\n  },\n  methods: {\n    async cargarDatos() {\n      const token = localStorage.getItem('token');\n      try {\n        // Cargar canales de servicio\n        const responseCanales = await axios.get('http://127.0.0.1:8000/api/canales-servicio/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.canalesServicio = responseCanales.data;\n      } catch (error) {\n        console.error('Error al cargar datos:', error);\n      }\n    },\n    mostrarFormularioCrearCanal() {\n      this.modalTitulo = 'Crear Canal de Servicio';\n      this.modalCampos = [{\n        label: 'Código',\n        key: 'codigoCanalServicio',\n        type: 'text'\n      }, {\n        label: 'Nombre',\n        key: 'nombreCanalServicio',\n        type: 'text'\n      }];\n      this.modalFormulario = {\n        codigoCanalServicio: '',\n        nombreCanalServicio: ''\n      };\n      this.esEdicion = false;\n      this.mostrarModal = true;\n    },\n    editarCanal(canal) {\n      this.modalTitulo = 'Editar Canal de Servicio';\n      this.modalCampos = [{\n        label: 'Código',\n        key: 'codigoCanalServicio',\n        type: 'text'\n      }, {\n        label: 'Nombre',\n        key: 'nombreCanalServicio',\n        type: 'text'\n      }];\n      this.modalFormulario = {\n        ...canal\n      };\n      this.esEdicion = true;\n      this.mostrarModal = true;\n    },\n    cerrarModal() {\n      this.mostrarModal = false;\n    },\n    async guardarModal(formulario) {\n      const token = localStorage.getItem('token');\n      try {\n        if (this.esEdicion) {\n          // Editar canal\n          await axios.put(`http://127.0.0.1:8000/api/canales-servicio/${formulario.id}/`, formulario, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          // Actualizar la lista de canales\n          const index = this.canalesServicio.findIndex(c => c.id === formulario.id);\n          this.canalesServicio.splice(index, 1, formulario);\n        } else {\n          // Crear canal\n          const response = await axios.post('http://127.0.0.1:8000/api/canales-servicio/', formulario, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.canalesServicio.push(response.data);\n        }\n        this.cerrarModal();\n      } catch (error) {\n        console.error('Error al guardar el canal:', error);\n      }\n    },\n    async eliminarCanal(id) {\n      if (confirm('¿Estás seguro de que deseas eliminar este canal?')) {\n        try {\n          const token = localStorage.getItem('token');\n          await axios.delete(`http://127.0.0.1:8000/api/canales-servicio/${id}/`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          // Eliminar el canal de la lista\n          this.canalesServicio = this.canalesServicio.filter(c => c.id !== id);\n        } catch (error) {\n          console.error('Error al eliminar el canal:', error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["NavBar","FooterPage","Modal","axios","name","components","data","tabActual","canalesServicio","mostrarModal","modalTitulo","modalCampos","modalFormulario","esEdicion","created","cargarDatos","methods","token","localStorage","getItem","responseCanales","get","headers","Authorization","error","console","mostrarFormularioCrearCanal","label","key","type","codigoCanalServicio","nombreCanalServicio","editarCanal","canal","cerrarModal","guardarModal","formulario","put","id","index","findIndex","c","splice","response","post","push","eliminarCanal","confirm","delete","filter"],"sources":["/home/jorge/Escritorio/Jorge-PC/Prueba Bancooci/frontend/src/views/Mantenimiento.vue"],"sourcesContent":["<template>\n    <div class=\"min-h-screen bg-gray-100\">\n      <!-- NavBar -->\n      <NavBar />\n  \n      <!-- Contenido Principal -->\n      <div class=\"container mx-auto p-4\">\n        <h1 class=\"text-3xl font-bold text-green-800 mb-4\">Mantenimientos</h1>\n  \n        <!-- Tabs para seleccionar la tabla a gestionar -->\n        <div class=\"mb-4\">\n          <button\n            @click=\"tabActual = 'canalesServicio'\"\n            :class=\"{\n              'bg-green-600 text-white': tabActual === 'canalesServicio',\n              'bg-white text-green-800': tabActual !== 'canalesServicio',\n            }\"\n            class=\"px-4 py-2 rounded-t-lg font-bold\"\n          >\n            Canales de Servicio\n          </button>\n          <button\n            @click=\"tabActual = 'agencias'\"\n            :class=\"{\n              'bg-green-600 text-white': tabActual === 'agencias',\n              'bg-white text-green-800': tabActual !== 'agencias',\n            }\"\n            class=\"px-4 py-2 rounded-t-lg font-bold\"\n          >\n            Agencias\n          </button>\n          <button\n            @click=\"tabActual = 'tiposCliente'\"\n            :class=\"{\n              'bg-green-600 text-white': tabActual === 'tiposCliente',\n              'bg-white text-green-800': tabActual !== 'tiposCliente',\n            }\"\n            class=\"px-4 py-2 rounded-t-lg font-bold\"\n          >\n            Tipos de Cliente\n          </button>\n          <button\n            @click=\"tabActual = 'tiposTransaccion'\"\n            :class=\"{\n              'bg-green-600 text-white': tabActual === 'tiposTransaccion',\n              'bg-white text-green-800': tabActual !== 'tiposTransaccion',\n            }\"\n            class=\"px-4 py-2 rounded-t-lg font-bold\"\n          >\n            Tipos de Transacción\n          </button>\n        </div>\n  \n        <!-- Tabla de Canales de Servicio -->\n        <div v-if=\"tabActual === 'canalesServicio'\" class=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 class=\"text-xl font-bold text-green-800 mb-4\">Canales de Servicio</h2>\n          <button @click=\"mostrarFormularioCrearCanal\" class=\"bg-green-600 text-white py-2 px-4 rounded-lg font-bold mb-4 hover:bg-green-700 transition duration-300\">\n            Crear Nuevo Canal\n          </button>\n          <table class=\"w-full\">\n            <thead>\n              <tr class=\"bg-green-100\">\n                <th class=\"px-4 py-2\">Código</th>\n                <th class=\"px-4 py-2\">Nombre</th>\n                <th class=\"px-4 py-2\">Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"canal in canalesServicio\" :key=\"canal.id\" class=\"border-b\">\n                <td class=\"px-4 py-2 text-center\">{{ canal.codigoCanalServicio }}</td>\n                <td class=\"px-4 py-2 text-center\">{{ canal.nombreCanalServicio }}</td>\n                <td class=\"px-4 py-2 text-center\">\n                  <button @click=\"editarCanal(canal)\" class=\"bg-yellow-500 text-white py-1 px-2 rounded-lg mr-2 hover:bg-yellow-600 transition duration-300\">Editar</button>\n                  <button @click=\"eliminarCanal(canal.id)\" class=\"bg-red-500 text-white py-1 px-2 rounded-lg hover:bg-red-600 transition duration-300\">Eliminar</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n  \n        <!-- Modal para crear/editar -->\n        <Modal\n          :mostrar=\"mostrarModal\"\n          :titulo=\"modalTitulo\"\n          :campos=\"modalCampos\"\n          :formulario=\"modalFormulario\"\n          @cerrar=\"cerrarModal\"\n          @guardar=\"guardarModal\"\n        />\n      </div>\n  \n      <!-- Footer -->\n      <FooterPage />\n    </div>\n  </template>\n  \n  <script>\n  import NavBar from '../components/Nav.vue';\n  import FooterPage from '../components/Footer.vue';\n  import Modal from '../components/Modal.vue'; // Importar el modal\n  import axios from 'axios';\n  \n  export default {\n    name: 'MantenimientosPage',\n    components: {\n      NavBar,\n      FooterPage,\n      Modal,\n    },\n    data() {\n      return {\n        tabActual: 'canalesServicio', // Pestaña activa\n        canalesServicio: [], // Lista de canales de servicio\n        mostrarModal: false, // Controla la visibilidad del modal\n        modalTitulo: '', // Título del modal\n        modalCampos: [], // Campos del formulario\n        modalFormulario: {}, // Datos del formulario\n        esEdicion: false, // Indica si el modal está en modo edición\n      };\n    },\n    async created() {\n      await this.cargarDatos();\n    },\n    methods: {\n      async cargarDatos() {\n        const token = localStorage.getItem('token');\n        try {\n          // Cargar canales de servicio\n          const responseCanales = await axios.get('http://127.0.0.1:8000/api/canales-servicio/', {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          this.canalesServicio = responseCanales.data;\n        } catch (error) {\n          console.error('Error al cargar datos:', error);\n        }\n      },\n      mostrarFormularioCrearCanal() {\n        this.modalTitulo = 'Crear Canal de Servicio';\n        this.modalCampos = [\n          { label: 'Código', key: 'codigoCanalServicio', type: 'text' },\n          { label: 'Nombre', key: 'nombreCanalServicio', type: 'text' },\n        ];\n        this.modalFormulario = { codigoCanalServicio: '', nombreCanalServicio: '' };\n        this.esEdicion = false;\n        this.mostrarModal = true;\n      },\n      editarCanal(canal) {\n        this.modalTitulo = 'Editar Canal de Servicio';\n        this.modalCampos = [\n          { label: 'Código', key: 'codigoCanalServicio', type: 'text' },\n          { label: 'Nombre', key: 'nombreCanalServicio', type: 'text' },\n        ];\n        this.modalFormulario = { ...canal };\n        this.esEdicion = true;\n        this.mostrarModal = true;\n      },\n      cerrarModal() {\n        this.mostrarModal = false;\n      },\n      async guardarModal(formulario) {\n        const token = localStorage.getItem('token');\n        try {\n          if (this.esEdicion) {\n            // Editar canal\n            await axios.put(`http://127.0.0.1:8000/api/canales-servicio/${formulario.id}/`, formulario, {\n              headers: { Authorization: `Bearer ${token}` },\n            });\n            // Actualizar la lista de canales\n            const index = this.canalesServicio.findIndex(c => c.id === formulario.id);\n            this.canalesServicio.splice(index, 1, formulario);\n          } else {\n            // Crear canal\n            const response = await axios.post('http://127.0.0.1:8000/api/canales-servicio/', formulario, {\n              headers: { Authorization: `Bearer ${token}` },\n            });\n            this.canalesServicio.push(response.data);\n          }\n          this.cerrarModal();\n        } catch (error) {\n          console.error('Error al guardar el canal:', error);\n        }\n      },\n      async eliminarCanal(id) {\n        if (confirm('¿Estás seguro de que deseas eliminar este canal?')) {\n          try {\n            const token = localStorage.getItem('token');\n            await axios.delete(`http://127.0.0.1:8000/api/canales-servicio/${id}/`, {\n              headers: { Authorization: `Bearer ${token}` },\n            });\n            // Eliminar el canal de la lista\n            this.canalesServicio = this.canalesServicio.filter(c => c.id !== id);\n          } catch (error) {\n            console.error('Error al eliminar el canal:', error);\n          }\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Estilos personalizados si es necesario */\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
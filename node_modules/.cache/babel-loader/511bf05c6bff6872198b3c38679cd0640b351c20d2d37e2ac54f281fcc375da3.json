{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport NavBar from '../components/Nav.vue';\nimport FooterPage from '../components/Footer.vue';\nimport Modal from '../components/Modal.vue'; // Importar el modal\nimport axios from 'axios';\nexport default {\n  name: 'MantenimientosPage',\n  components: {\n    NavBar,\n    FooterPage,\n    Modal\n  },\n  data() {\n    return {\n      tabActual: 'canalesServicio',\n      // Pestaña activa\n      canalesServicio: [],\n      // Lista de canales de servicio\n      agencias: [],\n      // Lista de agencias\n      tiposCliente: [],\n      // Lista de tipos de cliente\n      tiposTransaccion: [],\n      // Lista de tipos de transacción\n      mostrarModal: false,\n      // Controla la visibilidad del modal\n      modalTitulo: '',\n      // Título del modal\n      modalCampos: [],\n      // Campos del formulario\n      modalFormulario: {},\n      // Datos del formulario\n      entidadActual: '',\n      // Entidad actual (canalesServicio, agencias, etc.)\n      esEdicion: false // Indica si el modal está en modo edición\n    };\n  },\n  async created() {\n    await this.cargarDatos();\n  },\n  methods: {\n    async cargarDatos() {\n      const token = localStorage.getItem('token');\n      try {\n        // Cargar canales de servicio\n        const responseCanales = await axios.get('http://127.0.0.1:8000/api/canales-servicio/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.canalesServicio = responseCanales.data;\n\n        // Cargar agencias\n        const responseAgencias = await axios.get('http://127.0.0.1:8000/api/agencias/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.agencias = responseAgencias.data;\n\n        // Cargar tipos de cliente\n        const responseTiposCliente = await axios.get('http://127.0.0.1:8000/api/tipos-cliente/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.tiposCliente = responseTiposCliente.data;\n\n        // Cargar tipos de transacción\n        const responseTiposTransaccion = await axios.get('http://127.0.0.1:8000/api/tipos-transaccion/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.tiposTransaccion = responseTiposTransaccion.data;\n      } catch (error) {\n        console.error('Error al cargar datos:', error);\n      }\n    },\n    mostrarFormularioCrear(entidad) {\n      this.entidadActual = entidad;\n      this.esEdicion = false;\n\n      // Configurar campos y formulario según la entidad\n      switch (entidad) {\n        case 'canalesServicio':\n          this.modalTitulo = 'Crear Canal de Servicio';\n          this.modalCampos = [{\n            label: 'Código',\n            key: 'codigoCanalServicio',\n            type: 'text'\n          }, {\n            label: 'Nombre',\n            key: 'nombreCanalServicio',\n            type: 'text'\n          }];\n          this.modalFormulario = {\n            codigoCanalServicio: '',\n            nombreCanalServicio: ''\n          };\n          break;\n        case 'agencias':\n          this.modalTitulo = 'Crear Agencia';\n          this.modalCampos = [{\n            label: 'Código',\n            key: 'codigoAgencia',\n            type: 'text'\n          }, {\n            label: 'Nombre',\n            key: 'nombreAgencia',\n            type: 'text'\n          }];\n          this.modalFormulario = {\n            codigoAgencia: '',\n            nombreAgencia: ''\n          };\n          break;\n        case 'tiposCliente':\n          this.modalTitulo = 'Crear Tipo de Cliente';\n          this.modalCampos = [{\n            label: 'Código',\n            key: 'codigoTipoCliente',\n            type: 'text'\n          }, {\n            label: 'Nombre',\n            key: 'nombreTipoCliente',\n            type: 'text'\n          }];\n          this.modalFormulario = {\n            codigoTipoCliente: '',\n            nombreTipoCliente: ''\n          };\n          break;\n        case 'tiposTransaccion':\n          this.modalTitulo = 'Crear Tipo de Transacción';\n          this.modalCampos = [{\n            label: 'Código',\n            key: 'codigoTipoTransaccion',\n            type: 'text'\n          }, {\n            label: 'Nombre',\n            key: 'nombreTipoTransaccion',\n            type: 'text'\n          }];\n          this.modalFormulario = {\n            codigoTipoTransaccion: '',\n            nombreTipoTransaccion: ''\n          };\n          break;\n      }\n      this.mostrarModal = true;\n    },\n    editar(entidad, item) {\n      this.entidadActual = entidad;\n      this.esEdicion = true;\n\n      // Configurar campos y formulario según la entidad\n      switch (entidad) {\n        case 'canalesServicio':\n          this.modalTitulo = 'Editar Canal de Servicio';\n          this.modalCampos = [{\n            label: 'Código',\n            key: 'codigoCanalServicio',\n            type: 'text'\n          }, {\n            label: 'Nombre',\n            key: 'nombreCanalServicio',\n            type: 'text'\n          }];\n          this.modalFormulario = {\n            ...item\n          };\n          break;\n        case 'agencias':\n          this.modalTitulo = 'Editar Agencia';\n          this.modalCampos = [{\n            label: 'Código',\n            key: 'codigoAgencia',\n            type: 'text'\n          }, {\n            label: 'Nombre',\n            key: 'nombreAgencia',\n            type: 'text'\n          }];\n          this.modalFormulario = {\n            ...item\n          };\n          break;\n        case 'tiposCliente':\n          this.modalTitulo = 'Editar Tipo de Cliente';\n          this.modalCampos = [{\n            label: 'Código',\n            key: 'codigoTipoCliente',\n            type: 'text'\n          }, {\n            label: 'Nombre',\n            key: 'nombreTipoCliente',\n            type: 'text'\n          }];\n          this.modalFormulario = {\n            ...item\n          };\n          break;\n        case 'tiposTransaccion':\n          this.modalTitulo = 'Editar Tipo de Transacción';\n          this.modalCampos = [{\n            label: 'Código',\n            key: 'codigoTipoTransaccion',\n            type: 'text'\n          }, {\n            label: 'Nombre',\n            key: 'nombreTipoTransaccion',\n            type: 'text'\n          }];\n          this.modalFormulario = {\n            ...item\n          };\n          break;\n      }\n      this.mostrarModal = true;\n    },\n    cerrarModal() {\n      this.mostrarModal = false;\n    },\n    async guardarModal(formulario) {\n      const token = localStorage.getItem('token');\n      try {\n        if (this.esEdicion) {\n          // Editar registro\n          await axios.put(`http://127.0.0.1:8000/api/${this.entidadActual}/${formulario.id}/`, formulario, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          // Actualizar la lista\n          const lista = this[this.entidadActual];\n          const index = lista.findIndex(item => item.id === formulario.id);\n          lista.splice(index, 1, formulario);\n        } else {\n          // Crear registro\n          const response = await axios.post(`http://127.0.0.1:8000/api/${this.entidadActual}/`, formulario, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this[this.entidadActual].push(response.data);\n        }\n        this.cerrarModal();\n      } catch (error) {\n        console.error('Error al guardar:', error);\n      }\n    },\n    async eliminar(entidad, id) {\n      if (confirm('¿Estás seguro de que deseas eliminar este registro?')) {\n        try {\n          const token = localStorage.getItem('token');\n          await axios.delete(`http://127.0.0.1:8000/api/${entidad}/${id}/`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          // Eliminar el registro de la lista\n          this[entidad] = this[entidad].filter(item => item.id !== id);\n        } catch (error) {\n          console.error('Error al eliminar:', error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["NavBar","FooterPage","Modal","axios","name","components","data","tabActual","canalesServicio","agencias","tiposCliente","tiposTransaccion","mostrarModal","modalTitulo","modalCampos","modalFormulario","entidadActual","esEdicion","created","cargarDatos","methods","token","localStorage","getItem","responseCanales","get","headers","Authorization","responseAgencias","responseTiposCliente","responseTiposTransaccion","error","console","mostrarFormularioCrear","entidad","label","key","type","codigoCanalServicio","nombreCanalServicio","codigoAgencia","nombreAgencia","codigoTipoCliente","nombreTipoCliente","codigoTipoTransaccion","nombreTipoTransaccion","editar","item","cerrarModal","guardarModal","formulario","put","id","lista","index","findIndex","splice","response","post","push","eliminar","confirm","delete","filter"],"sources":["/home/jorge/Escritorio/Jorge-PC/Prueba Bancooci/frontend/src/views/Mantenimiento.vue"],"sourcesContent":["<template>\n    <div class=\"min-h-screen bg-gray-100\">\n      <!-- NavBar -->\n      <NavBar />\n  \n      <!-- Contenido Principal -->\n      <div class=\"container mx-auto p-4\">\n        <h1 class=\"text-3xl font-bold text-green-800 mb-4\">Mantenimientos</h1>\n  \n        <!-- Tabs para seleccionar la tabla a gestionar -->\n        <div class=\"mb-4\">\n          <button\n            @click=\"tabActual = 'canalesServicio'\"\n            :class=\"{\n              'bg-green-600 text-white': tabActual === 'canalesServicio',\n              'bg-white text-green-800': tabActual !== 'canalesServicio',\n            }\"\n            class=\"px-4 py-2 rounded-t-lg font-bold\"\n          >\n            Canales de Servicio\n          </button>\n          <button\n            @click=\"tabActual = 'agencias'\"\n            :class=\"{\n              'bg-green-600 text-white': tabActual === 'agencias',\n              'bg-white text-green-800': tabActual !== 'agencias',\n            }\"\n            class=\"px-4 py-2 rounded-t-lg font-bold\"\n          >\n            Agencias\n          </button>\n          <button\n            @click=\"tabActual = 'tiposCliente'\"\n            :class=\"{\n              'bg-green-600 text-white': tabActual === 'tiposCliente',\n              'bg-white text-green-800': tabActual !== 'tiposCliente',\n            }\"\n            class=\"px-4 py-2 rounded-t-lg font-bold\"\n          >\n            Tipos de Cliente\n          </button>\n          <button\n            @click=\"tabActual = 'tiposTransaccion'\"\n            :class=\"{\n              'bg-green-600 text-white': tabActual === 'tiposTransaccion',\n              'bg-white text-green-800': tabActual !== 'tiposTransaccion',\n            }\"\n            class=\"px-4 py-2 rounded-t-lg font-bold\"\n          >\n            Tipos de Transacción\n          </button>\n        </div>\n  \n        <!-- Tabla de Canales de Servicio -->\n        <div v-if=\"tabActual === 'canalesServicio'\" class=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 class=\"text-xl font-bold text-green-800 mb-4\">Canales de Servicio</h2>\n          <button @click=\"mostrarFormularioCrear('canalesServicio')\" class=\"bg-green-600 text-white py-2 px-4 rounded-lg font-bold mb-4 hover:bg-green-700 transition duration-300\">\n            Crear Nuevo Canal\n          </button>\n          <table class=\"w-full\">\n            <thead>\n              <tr class=\"bg-green-100\">\n                <th class=\"px-4 py-2\">Código</th>\n                <th class=\"px-4 py-2\">Nombre</th>\n                <th class=\"px-4 py-2\">Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"canal in canalesServicio\" :key=\"canal.id\" class=\"border-b\">\n                <td class=\"px-4 py-2 text-center\">{{ canal.codigoCanalServicio }}</td>\n                <td class=\"px-4 py-2 text-center\">{{ canal.nombreCanalServicio }}</td>\n                <td class=\"px-4 py-2 text-center\">\n                  <button @click=\"editar('canalesServicio', canal)\" class=\"bg-yellow-500 text-white py-1 px-2 rounded-lg mr-2 hover:bg-yellow-600 transition duration-300\">Editar</button>\n                  <button @click=\"eliminar('canalesServicio', canal.id)\" class=\"bg-red-500 text-white py-1 px-2 rounded-lg hover:bg-red-600 transition duration-300\">Eliminar</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n  \n        <!-- Tabla de Agencias -->\n        <div v-if=\"tabActual === 'agencias'\" class=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 class=\"text-xl font-bold text-green-800 mb-4\">Agencias</h2>\n          <button @click=\"mostrarFormularioCrear('agencias')\" class=\"bg-green-600 text-white py-2 px-4 rounded-lg font-bold mb-4 hover:bg-green-700 transition duration-300\">\n            Crear Nueva Agencia\n          </button>\n          <table class=\"w-full\">\n            <thead>\n              <tr class=\"bg-green-100\">\n                <th class=\"px-4 py-2\">Código</th>\n                <th class=\"px-4 py-2\">Nombre</th>\n                <th class=\"px-4 py-2\">Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"agencia in agencias\" :key=\"agencia.id\" class=\"border-b\">\n                <td class=\"px-4 py-2 text-center\">{{ agencia.codigoAgencia }}</td>\n                <td class=\"px-4 py-2 text-center\">{{ agencia.nombreAgencia }}</td>\n                <td class=\"px-4 py-2 text-center\">\n                  <button @click=\"editar('agencias', agencia)\" class=\"bg-yellow-500 text-white py-1 px-2 rounded-lg mr-2 hover:bg-yellow-600 transition duration-300\">Editar</button>\n                  <button @click=\"eliminar('agencias', agencia.id)\" class=\"bg-red-500 text-white py-1 px-2 rounded-lg hover:bg-red-600 transition duration-300\">Eliminar</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n  \n        <!-- Tabla de Tipos de Cliente -->\n        <div v-if=\"tabActual === 'tiposCliente'\" class=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 class=\"text-xl font-bold text-green-800 mb-4\">Tipos de Cliente</h2>\n          <button @click=\"mostrarFormularioCrear('tiposCliente')\" class=\"bg-green-600 text-white py-2 px-4 rounded-lg font-bold mb-4 hover:bg-green-700 transition duration-300\">\n            Crear Nuevo Tipo\n          </button>\n          <table class=\"w-full\">\n            <thead>\n              <tr class=\"bg-green-100\">\n                <th class=\"px-4 py-2\">Código</th>\n                <th class=\"px-4 py-2\">Nombre</th>\n                <th class=\"px-4 py-2\">Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"tipo in tiposCliente\" :key=\"tipo.id\" class=\"border-b\">\n                <td class=\"px-4 py-2 text-center\">{{ tipo.codigoTipoCliente }}</td>\n                <td class=\"px-4 py-2 text-center\">{{ tipo.nombreTipoCliente }}</td>\n                <td class=\"px-4 py-2 text-center\">\n                  <button @click=\"editar('tiposCliente', tipo)\" class=\"bg-yellow-500 text-white py-1 px-2 rounded-lg mr-2 hover:bg-yellow-600 transition duration-300\">Editar</button>\n                  <button @click=\"eliminar('tiposCliente', tipo.id)\" class=\"bg-red-500 text-white py-1 px-2 rounded-lg hover:bg-red-600 transition duration-300\">Eliminar</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n  \n        <!-- Tabla de Tipos de Transacción -->\n        <div v-if=\"tabActual === 'tiposTransaccion'\" class=\"bg-white p-6 rounded-lg shadow-lg\">\n          <h2 class=\"text-xl font-bold text-green-800 mb-4\">Tipos de Transacción</h2>\n          <button @click=\"mostrarFormularioCrear('tiposTransaccion')\" class=\"bg-green-600 text-white py-2 px-4 rounded-lg font-bold mb-4 hover:bg-green-700 transition duration-300\">\n            Crear Nuevo Tipo\n          </button>\n          <table class=\"w-full\">\n            <thead>\n              <tr class=\"bg-green-100\">\n                <th class=\"px-4 py-2\">Código</th>\n                <th class=\"px-4 py-2\">Nombre</th>\n                <th class=\"px-4 py-2\">Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"tipo in tiposTransaccion\" :key=\"tipo.id\" class=\"border-b\">\n                <td class=\"px-4 py-2 text-center\">{{ tipo.codigoTipoTransaccion }}</td>\n                <td class=\"px-4 py-2 text-center\">{{ tipo.nombreTipoTransaccion }}</td>\n                <td class=\"px-4 py-2 text-center\">\n                  <button @click=\"editar('tiposTransaccion', tipo)\" class=\"bg-yellow-500 text-white py-1 px-2 rounded-lg mr-2 hover:bg-yellow-600 transition duration-300\">Editar</button>\n                  <button @click=\"eliminar('tiposTransaccion', tipo.id)\" class=\"bg-red-500 text-white py-1 px-2 rounded-lg hover:bg-red-600 transition duration-300\">Eliminar</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n  \n        <!-- Modal para crear/editar -->\n        <Modal\n          :mostrar=\"mostrarModal\"\n          :titulo=\"modalTitulo\"\n          :campos=\"modalCampos\"\n          :formulario=\"modalFormulario\"\n          @cerrar=\"cerrarModal\"\n          @guardar=\"guardarModal\"\n        />\n      </div>\n  \n      <!-- Footer -->\n      <FooterPage />\n    </div>\n  </template>\n  \n  <script>\n  import NavBar from '../components/Nav.vue';\n  import FooterPage from '../components/Footer.vue';\n  import Modal from '../components/Modal.vue'; // Importar el modal\n  import axios from 'axios';\n  \n  export default {\n    name: 'MantenimientosPage',\n    components: {\n      NavBar,\n      FooterPage,\n      Modal,\n    },\n    data() {\n      return {\n        tabActual: 'canalesServicio', // Pestaña activa\n        canalesServicio: [], // Lista de canales de servicio\n        agencias: [], // Lista de agencias\n        tiposCliente: [], // Lista de tipos de cliente\n        tiposTransaccion: [], // Lista de tipos de transacción\n        mostrarModal: false, // Controla la visibilidad del modal\n        modalTitulo: '', // Título del modal\n        modalCampos: [], // Campos del formulario\n        modalFormulario: {}, // Datos del formulario\n        entidadActual: '', // Entidad actual (canalesServicio, agencias, etc.)\n        esEdicion: false, // Indica si el modal está en modo edición\n      };\n    },\n    async created() {\n      await this.cargarDatos();\n    },\n    methods: {\n      async cargarDatos() {\n        const token = localStorage.getItem('token');\n        try {\n          // Cargar canales de servicio\n          const responseCanales = await axios.get('http://127.0.0.1:8000/api/canales-servicio/', {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          this.canalesServicio = responseCanales.data;\n  \n          // Cargar agencias\n          const responseAgencias = await axios.get('http://127.0.0.1:8000/api/agencias/', {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          this.agencias = responseAgencias.data;\n  \n          // Cargar tipos de cliente\n          const responseTiposCliente = await axios.get('http://127.0.0.1:8000/api/tipos-cliente/', {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          this.tiposCliente = responseTiposCliente.data;\n  \n          // Cargar tipos de transacción\n          const responseTiposTransaccion = await axios.get('http://127.0.0.1:8000/api/tipos-transaccion/', {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          this.tiposTransaccion = responseTiposTransaccion.data;\n        } catch (error) {\n          console.error('Error al cargar datos:', error);\n        }\n      },\n      mostrarFormularioCrear(entidad) {\n        this.entidadActual = entidad;\n        this.esEdicion = false;\n  \n        // Configurar campos y formulario según la entidad\n        switch (entidad) {\n          case 'canalesServicio':\n            this.modalTitulo = 'Crear Canal de Servicio';\n            this.modalCampos = [\n              { label: 'Código', key: 'codigoCanalServicio', type: 'text' },\n              { label: 'Nombre', key: 'nombreCanalServicio', type: 'text' },\n            ];\n            this.modalFormulario = { codigoCanalServicio: '', nombreCanalServicio: '' };\n            break;\n          case 'agencias':\n            this.modalTitulo = 'Crear Agencia';\n            this.modalCampos = [\n              { label: 'Código', key: 'codigoAgencia', type: 'text' },\n              { label: 'Nombre', key: 'nombreAgencia', type: 'text' },\n            ];\n            this.modalFormulario = { codigoAgencia: '', nombreAgencia: '' };\n            break;\n          case 'tiposCliente':\n            this.modalTitulo = 'Crear Tipo de Cliente';\n            this.modalCampos = [\n              { label: 'Código', key: 'codigoTipoCliente', type: 'text' },\n              { label: 'Nombre', key: 'nombreTipoCliente', type: 'text' },\n            ];\n            this.modalFormulario = { codigoTipoCliente: '', nombreTipoCliente: '' };\n            break;\n          case 'tiposTransaccion':\n            this.modalTitulo = 'Crear Tipo de Transacción';\n            this.modalCampos = [\n              { label: 'Código', key: 'codigoTipoTransaccion', type: 'text' },\n              { label: 'Nombre', key: 'nombreTipoTransaccion', type: 'text' },\n            ];\n            this.modalFormulario = { codigoTipoTransaccion: '', nombreTipoTransaccion: '' };\n            break;\n        }\n  \n        this.mostrarModal = true;\n      },\n      editar(entidad, item) {\n        this.entidadActual = entidad;\n        this.esEdicion = true;\n  \n        // Configurar campos y formulario según la entidad\n        switch (entidad) {\n          case 'canalesServicio':\n            this.modalTitulo = 'Editar Canal de Servicio';\n            this.modalCampos = [\n              { label: 'Código', key: 'codigoCanalServicio', type: 'text' },\n              { label: 'Nombre', key: 'nombreCanalServicio', type: 'text' },\n            ];\n            this.modalFormulario = { ...item };\n            break;\n          case 'agencias':\n            this.modalTitulo = 'Editar Agencia';\n            this.modalCampos = [\n              { label: 'Código', key: 'codigoAgencia', type: 'text' },\n              { label: 'Nombre', key: 'nombreAgencia', type: 'text' },\n            ];\n            this.modalFormulario = { ...item };\n            break;\n          case 'tiposCliente':\n            this.modalTitulo = 'Editar Tipo de Cliente';\n            this.modalCampos = [\n              { label: 'Código', key: 'codigoTipoCliente', type: 'text' },\n              { label: 'Nombre', key: 'nombreTipoCliente', type: 'text' },\n            ];\n            this.modalFormulario = { ...item };\n            break;\n          case 'tiposTransaccion':\n            this.modalTitulo = 'Editar Tipo de Transacción';\n            this.modalCampos = [\n              { label: 'Código', key: 'codigoTipoTransaccion', type: 'text' },\n              { label: 'Nombre', key: 'nombreTipoTransaccion', type: 'text' },\n            ];\n            this.modalFormulario = { ...item };\n            break;\n        }\n  \n        this.mostrarModal = true;\n      },\n      cerrarModal() {\n        this.mostrarModal = false;\n      },\n      async guardarModal(formulario) {\n        const token = localStorage.getItem('token');\n        try {\n          if (this.esEdicion) {\n            // Editar registro\n            await axios.put(`http://127.0.0.1:8000/api/${this.entidadActual}/${formulario.id}/`, formulario, {\n              headers: { Authorization: `Bearer ${token}` },\n            });\n            // Actualizar la lista\n            const lista = this[this.entidadActual];\n            const index = lista.findIndex(item => item.id === formulario.id);\n            lista.splice(index, 1, formulario);\n          } else {\n            // Crear registro\n            const response = await axios.post(`http://127.0.0.1:8000/api/${this.entidadActual}/`, formulario, {\n              headers: { Authorization: `Bearer ${token}` },\n            });\n            this[this.entidadActual].push(response.data);\n          }\n          this.cerrarModal();\n        } catch (error) {\n          console.error('Error al guardar:', error);\n        }\n      },\n      async eliminar(entidad, id) {\n        if (confirm('¿Estás seguro de que deseas eliminar este registro?')) {\n          try {\n            const token = localStorage.getItem('token');\n            await axios.delete(`http://127.0.0.1:8000/api/${entidad}/${id}/`, {\n              headers: { Authorization: `Bearer ${token}` },\n            });\n            // Eliminar el registro de la lista\n            this[entidad] = this[entidad].filter(item => item.id !== id);\n          } catch (error) {\n            console.error('Error al eliminar:', error);\n          }\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Estilos personalizados si es necesario */\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}